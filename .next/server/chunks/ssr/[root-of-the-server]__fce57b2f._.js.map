{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 207, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Lenovo/OneDrive/Desktop/New%20folder%20%284%29/Careerpilot/src/ai/genkit.ts"],"sourcesContent":["import {genkit} from 'genkit';\r\nimport {googleAI} from '@genkit-ai/googleai';\r\n\r\nexport const ai = genkit({\r\n  plugins: [googleAI()],\r\n  model: 'googleai/gemini-2.0-flash',\r\n});\r\n"],"names":[],"mappings":";;;AAAA;AAAA;AACA;AAAA;;;AAEO,MAAM,KAAK,CAAA,GAAA,uIAAA,CAAA,SAAM,AAAD,EAAE;IACvB,SAAS;QAAC,CAAA,GAAA,2KAAA,CAAA,WAAQ,AAAD;KAAI;IACrB,OAAO;AACT","debugId":null}},
    {"offset": {"line": 228, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Lenovo/OneDrive/Desktop/New%20folder%20%284%29/Careerpilot/src/ai/flows/interview-coach.ts"],"sourcesContent":["'use server';\r\n\r\n/**\r\n * @fileOverview An AI-powered mock interview coach.\r\n *\r\n * - generateQuestions: Generates a list of interview questions for a job title.\r\n * - evaluateAnswer: Evaluates a user's answer to a specific question.\r\n * - summarizeInterview: Provides an overall score and summary for the entire interview.\r\n */\r\n\r\nimport { ai } from '@/ai/genkit';\r\nimport { z } from 'genkit';\r\n\r\n// Schema for generating questions\r\nconst GenerateQuestionsInputSchema = z.object({\r\n  jobTitle: z.string().describe('The job title the user is interviewing for.'),\r\n});\r\nexport type GenerateQuestionsInput = z.infer<typeof GenerateQuestionsInputSchema>;\r\n\r\nconst GenerateQuestionsOutputSchema = z.object({\r\n  questions: z.array(z.string()).describe('A list of 5-7 relevant interview questions.'),\r\n});\r\nexport type GenerateQuestionsOutput = z.infer<typeof GenerateQuestionsOutputSchema>;\r\n\r\n\r\n// Schema for evaluating an answer\r\nconst FeedbackSchema = z.object({\r\n    feedback: z.string().describe('Constructive, specific feedback on the user\\'s answer.'),\r\n    score: z.number().min(1).max(5).describe('A score from 1 to 5 on the quality of the answer.'),\r\n});\r\n\r\nconst EvaluateAnswerInputSchema = z.object({\r\n  jobTitle: z.string().describe('The job title for context.'),\r\n  question: z.string().describe('The interview question that was asked.'),\r\n  answer: z.string().describe(\"The user's answer to the question.\"),\r\n});\r\nexport type EvaluateAnswerInput = z.infer<typeof EvaluateAnswerInputSchema>;\r\n\r\nexport type EvaluateAnswerOutput = z.infer<typeof FeedbackSchema>;\r\n\r\n\r\n// Schema for summarizing the interview\r\nconst InterviewHistoryItemSchema = z.object({\r\n    question: z.string(),\r\n    answer: z.string(),\r\n    feedback: FeedbackSchema,\r\n});\r\n\r\nconst SummarizeInterviewInputSchema = z.object({\r\n    jobTitle: z.string().describe('The job title for context.'),\r\n    interviewHistory: z.array(InterviewHistoryItemSchema).describe('The full history of the interview session.'),\r\n});\r\nexport type SummarizeInterviewInput = z.infer<typeof SummarizeInterviewInputSchema>;\r\n\r\nconst SummarizeInterviewOutputSchema = z.object({\r\n    overallScore: z.number().min(0).max(100).describe('An overall score for the interview from 0 to 100.'),\r\n    summary: z.string().describe('A summary of the user\\'s performance, highlighting strengths and weaknesses.'),\r\n    suggestions: z.array(z.string()).describe('A list of actionable suggestions for improvement.'),\r\n});\r\nexport type SummarizeInterviewOutput = z.infer<typeof SummarizeInterviewOutputSchema>;\r\n\r\n\r\n// Exported functions\r\nexport async function generateQuestions(input: GenerateQuestionsInput): Promise<GenerateQuestionsOutput> {\r\n  return generateQuestionsFlow(input);\r\n}\r\n\r\nexport async function evaluateAnswer(input: EvaluateAnswerInput): Promise<EvaluateAnswerOutput> {\r\n  return evaluateAnswerFlow(input);\r\n}\r\n\r\nexport async function summarizeInterview(input: SummarizeInterviewInput): Promise<SummarizeInterviewOutput> {\r\n    return summarizeInterviewFlow(input);\r\n}\r\n\r\n\r\n// Internal Flows and Prompts\r\n\r\nconst generateQuestionsPrompt = ai.definePrompt({\r\n  name: 'generateInterviewQuestionsPrompt',\r\n  input: { schema: GenerateQuestionsInputSchema },\r\n  output: { schema: GenerateQuestionsOutputSchema },\r\n  prompt: `You are an expert HR manager and career coach specializing in interviews.\r\n  \r\n  Your task is to generate a list of 5 to 7 insightful and common interview questions for the following job title: {{{jobTitle}}}.\r\n\r\n  The questions should cover a range of topics, including behavioral, situational, and technical questions relevant to the role. Do not include more than 7 questions.\r\n  `,\r\n});\r\n\r\nconst generateQuestionsFlow = ai.defineFlow(\r\n  {\r\n    name: 'generateQuestionsFlow',\r\n    inputSchema: GenerateQuestionsInputSchema,\r\n    outputSchema: GenerateQuestionsOutputSchema,\r\n  },\r\n  async (input) => {\r\n    const { output } = await generateQuestionsPrompt(input);\r\n    return output!;\r\n  }\r\n);\r\n\r\n\r\nconst evaluateAnswerPrompt = ai.definePrompt({\r\n    name: 'evaluateAnswerPrompt',\r\n    input: { schema: EvaluateAnswerInputSchema },\r\n    output: { schema: FeedbackSchema },\r\n    prompt: `You are an expert interview coach. Your task is to evaluate a user's answer to an interview question and provide constructive feedback.\r\n\r\n    **Job Title:** {{{jobTitle}}}\r\n    **Question:** \"{{{question}}}\"\r\n    **User's Answer:** \"{{{answer}}}\"\r\n\r\n    Evaluation Criteria:\r\n    1.  **Clarity and Conciseness:** Is the answer clear, structured, and to the point?\r\n    2.  **Relevance:** Does the answer directly address the question?\r\n    3.  **Impact (STAR Method):** Does the user effectively describe the Situation, Task, Action, and Result?\r\n    4.  **Confidence and Tone:** Does the answer project confidence and professionalism?\r\n\r\n    Based on these criteria, please provide:\r\n    1.  **Score:** A score from 1 (Needs significant improvement) to 5 (Excellent).\r\n    2.  **Feedback:** Specific, actionable feedback. Start with what was good about the answer, then suggest concrete improvements. Frame the feedback to be encouraging and helpful.\r\n    `\r\n});\r\n\r\nconst evaluateAnswerFlow = ai.defineFlow(\r\n    {\r\n        name: 'evaluateAnswerFlow',\r\n        inputSchema: EvaluateAnswerInputSchema,\r\n        outputSchema: FeedbackSchema,\r\n    },\r\n    async (input) => {\r\n        const { output } = await evaluateAnswerPrompt(input);\r\n        return output!;\r\n    }\r\n);\r\n\r\n\r\nconst summarizeInterviewPrompt = ai.definePrompt({\r\n    name: 'summarizeInterviewPrompt',\r\n    input: { schema: SummarizeInterviewInputSchema },\r\n    output: { schema: SummarizeInterviewOutputSchema },\r\n    prompt: `You are a master career coach who has just observed a mock interview session for the role of **{{{jobTitle}}}**. Your task is to provide a final report card for the user based on their performance across all questions.\r\n\r\n    Here is the full transcript of the interview:\r\n    {{#each interviewHistory}}\r\n    ---\r\n    **Question:** {{question}}\r\n    **Answer:** {{answer}}\r\n    **Individual Feedback:** (Score: {{feedback.score}}/5) {{feedback.feedback}}\r\n    ---\r\n    {{/each}}\r\n\r\n    Instructions for your final analysis:\r\n    1.  **Review Holistically:** Do not just repeat the individual feedback. Synthesize the results to identify patterns. Did the user consistently struggle with being concise? Did they excel at providing data-driven results?\r\n    2.  **Calculate Overall Score:** Based on the individual scores and your overall impression, calculate a final score for the interview out of 100.\r\n    3.  **Write a Summary:** Provide a brief summary of the user's performance. Start with their key strengths and then transition to their main areas for improvement.\r\n    4.  **Give Actionable Suggestions:** Provide a list of 3-5 high-level, actionable suggestions that would most improve their interview performance.\r\n    `\r\n});\r\n\r\nconst summarizeInterviewFlow = ai.defineFlow(\r\n    {\r\n        name: 'summarizeInterviewFlow',\r\n        inputSchema: SummarizeInterviewInputSchema,\r\n        outputSchema: SummarizeInterviewOutputSchema,\r\n    },\r\n    async (input) => {\r\n        const { output } = await summarizeInterviewPrompt(input);\r\n        return output!;\r\n    }\r\n);\r\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 396, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Lenovo/OneDrive/Desktop/New%20folder%20%284%29/Careerpilot/.next-internal/server/app/interview/page/actions.js%20%28server%20actions%20loader%29"],"sourcesContent":["export {generateQuestions as '408d9b1a5b62fdd62b3deb7b8930ffec3311f0d4a5'} from 'ACTIONS_MODULE0'\nexport {evaluateAnswer as '40b85d8e7f232f1ec31a457b6f37c26e7d1b676b16'} from 'ACTIONS_MODULE0'\nexport {summarizeInterview as '40df54dc97d2c08e4f45255889a5b6f0e595133b1f'} from 'ACTIONS_MODULE0'\n"],"names":[],"mappings":";AAAA","debugId":null}},
    {"offset": {"line": 454, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Lenovo/OneDrive/Desktop/New%20folder%20%284%29/Careerpilot/src/app/interview/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/interview/page.tsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/interview/page.tsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAA8R,GAC3T,4DACA","debugId":null}},
    {"offset": {"line": 468, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Lenovo/OneDrive/Desktop/New%20folder%20%284%29/Careerpilot/src/app/interview/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/interview/page.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/interview/page.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAA0Q,GACvS,wCACA","debugId":null}},
    {"offset": {"line": 482, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}}]
}